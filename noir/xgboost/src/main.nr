// Code generated from Python2Noir
// Fixed number is 100

use dep::std::println;
fn trees0class0(inputs : [i32;6],) -> pub i32 {
	if inputs[3] < 50 {
		if inputs[1] < 50 {
			55
		} else {
			0-15
		}
	} else {
		0-19
	}
}
fn trees0class1(inputs : [i32;6],) -> pub i32 {
	if inputs[2] < 50 {
		if inputs[0] < 3896 {
			56
		} else {
			0-14
		}
	} else {
		0-19
	}
}
fn trees0class2(inputs : [i32;6],) -> pub i32 {
	if inputs[0] < 3796 {
		0-18
	} else {
		if inputs[2] < 50 {
			0-14
		} else {
			if inputs[1] < 50 {
				51
			} else {
				if inputs[3] < 50 {
					46
				} else {
					0-17
				}
			}
		}
	}
}
fn trees0class3(inputs : [i32;6],) -> pub i32 {
	if inputs[1] < 50 {
		0-19
	} else {
		if inputs[3] < 50 {
			0-15
		} else {
			52
		}
	}
}
fn trees1class0(inputs : [i32;6],) -> pub i32 {
	if inputs[3] < 50 {
		if inputs[1] < 50 {
			34
		} else {
			0-13
		}
	} else {
		0-17
	}
}
fn trees1class1(inputs : [i32;6],) -> pub i32 {
	if inputs[2] < 50 {
		if inputs[0] < 3896 {
			35
		} else {
			0-13
		}
	} else {
		0-17
	}
}
fn trees1class2(inputs : [i32;6],) -> pub i32 {
	if inputs[0] < 3796 {
		0-17
	} else {
		if inputs[2] < 50 {
			0-13
		} else {
			if inputs[1] < 50 {
				33
			} else {
				if inputs[3] < 50 {
					32
				} else {
					0-15
				}
			}
		}
	}
}
fn trees1class3(inputs : [i32;6],) -> pub i32 {
	if inputs[1] < 50 {
		0-17
	} else {
		if inputs[3] < 50 {
			0-13
		} else {
			34
		}
	}
}
fn trees2class0(inputs : [i32;6],) -> pub i32 {
	if inputs[3] < 50 {
		if inputs[1] < 50 {
			26
		} else {
			0-12
		}
	} else {
		0-16
	}
}
fn trees2class1(inputs : [i32;6],) -> pub i32 {
	if inputs[2] < 50 {
		if inputs[0] < 3896 {
			27
		} else {
			0-11
		}
	} else {
		0-16
	}
}
fn trees2class2(inputs : [i32;6],) -> pub i32 {
	if inputs[0] < 3796 {
		0-16
	} else {
		if inputs[2] < 50 {
			0-11
		} else {
			if inputs[1] < 50 {
				26
			} else {
				if inputs[3] < 50 {
					25
				} else {
					0-14
				}
			}
		}
	}
}
fn trees2class3(inputs : [i32;6],) -> pub i32 {
	if inputs[1] < 50 {
		0-16
	} else {
		if inputs[3] < 50 {
			0-12
		} else {
			26
		}
	}
}
fn trees3class0(inputs : [i32;6],) -> pub i32 {
	if inputs[3] < 50 {
		if inputs[1] < 50 {
			22
		} else {
			0-11
		}
	} else {
		0-15
	}
}
fn trees3class1(inputs : [i32;6],) -> pub i32 {
	if inputs[2] < 50 {
		if inputs[0] < 3896 {
			22
		} else {
			0-10
		}
	} else {
		0-15
	}
}
fn trees3class2(inputs : [i32;6],) -> pub i32 {
	if inputs[0] < 3796 {
		0-15
	} else {
		if inputs[2] < 50 {
			0-10
		} else {
			if inputs[1] < 50 {
				21
			} else {
				if inputs[3] < 50 {
					21
				} else {
					0-13
				}
			}
		}
	}
}
fn trees3class3(inputs : [i32;6],) -> pub i32 {
	if inputs[1] < 50 {
		0-15
	} else {
		if inputs[3] < 50 {
			0-11
		} else {
			22
		}
	}
}
fn trees4class0(inputs : [i32;6],) -> pub i32 {
	if inputs[3] < 50 {
		if inputs[1] < 50 {
			20
		} else {
			0-10
		}
	} else {
		0-15
	}
}
fn trees4class1(inputs : [i32;6],) -> pub i32 {
	if inputs[2] < 50 {
		if inputs[0] < 3896 {
			20
		} else {
			0-9
		}
	} else {
		0-15
	}
}
fn trees4class2(inputs : [i32;6],) -> pub i32 {
	if inputs[0] < 3796 {
		0-14
	} else {
		if inputs[2] < 50 {
			0-9
		} else {
			if inputs[1] < 50 {
				19
			} else {
				if inputs[3] < 50 {
					18
				} else {
					0-12
				}
			}
		}
	}
}
fn trees4class3(inputs : [i32;6],) -> pub i32 {
	if inputs[1] < 50 {
		0-15
	} else {
		if inputs[3] < 50 {
			0-10
		} else {
			19
		}
	}
}
fn trees5class0(inputs : [i32;6],) -> pub i32 {
	if inputs[3] < 50 {
		if inputs[1] < 50 {
			18
		} else {
			0-9
		}
	} else {
		0-14
	}
}
fn trees5class1(inputs : [i32;6],) -> pub i32 {
	if inputs[2] < 50 {
		if inputs[0] < 3896 {
			18
		} else {
			0-8
		}
	} else {
		0-14
	}
}
fn trees5class2(inputs : [i32;6],) -> pub i32 {
	if inputs[0] < 3796 {
		0-14
	} else {
		if inputs[2] < 50 {
			0-8
		} else {
			if inputs[1] < 50 {
				17
			} else {
				if inputs[3] < 50 {
					16
				} else {
					0-11
				}
			}
		}
	}
}
fn trees5class3(inputs : [i32;6],) -> pub i32 {
	if inputs[1] < 50 {
		0-14
	} else {
		if inputs[3] < 50 {
			0-9
		} else {
			17
		}
	}
}
fn trees6class0(inputs : [i32;6],) -> pub i32 {
	if inputs[3] < 50 {
		if inputs[1] < 50 {
			16
		} else {
			0-8
		}
	} else {
		0-13
	}
}
fn trees6class1(inputs : [i32;6],) -> pub i32 {
	if inputs[2] < 50 {
		if inputs[0] < 3785 {
			16
		} else {
			2
		}
	} else {
		0-13
	}
}
fn trees6class2(inputs : [i32;6],) -> pub i32 {
	if inputs[0] < 3796 {
		0-13
	} else {
		if inputs[5] < 50 {
			if inputs[3] < 50 {
				9
			} else {
				0-8
			}
		} else {
			11
		}
	}
}
fn trees6class3(inputs : [i32;6],) -> pub i32 {
	if inputs[1] < 50 {
		0-13
	} else {
		if inputs[3] < 50 {
			0-8
		} else {
			16
		}
	}
}
fn trees7class0(inputs : [i32;6],) -> pub i32 {
	if inputs[3] < 50 {
		if inputs[1] < 50 {
			15
		} else {
			0-8
		}
	} else {
		0-13
	}
}
fn trees7class1(inputs : [i32;6],) -> pub i32 {
	if inputs[2] < 50 {
		if inputs[0] < 3785 {
			15
		} else {
			2
		}
	} else {
		0-13
	}
}
fn trees7class2(inputs : [i32;6],) -> pub i32 {
	if inputs[0] < 3796 {
		0-12
	} else {
		if inputs[5] < 50 {
			if inputs[3] < 50 {
				8
			} else {
				0-7
			}
		} else {
			10
		}
	}
}
fn trees7class3(inputs : [i32;6],) -> pub i32 {
	if inputs[1] < 50 {
		0-13
	} else {
		if inputs[3] < 50 {
			0-8
		} else {
			15
		}
	}
}
fn trees8class0(inputs : [i32;6],) -> pub i32 {
	if inputs[3] < 50 {
		if inputs[0] < 4031 {
			13
		} else {
			2
		}
	} else {
		0-12
	}
}
fn trees8class1(inputs : [i32;6],) -> pub i32 {
	if inputs[2] < 50 {
		if inputs[0] < 3785 {
			14
		} else {
			2
		}
	} else {
		0-12
	}
}
fn trees8class2(inputs : [i32;6],) -> pub i32 {
	if inputs[0] < 3796 {
		0-11
	} else {
		if inputs[5] < 50 {
			if inputs[0] < 4096 {
				if inputs[0] < 4055 {
					0-1
				} else {
					2
				}
			} else {
				6
			}
		} else {
			9
		}
	}
}
fn trees8class3(inputs : [i32;6],) -> pub i32 {
	if inputs[1] < 50 {
		0-12
	} else {
		9
	}
}
fn trees9class0(inputs : [i32;6],) -> pub i32 {
	if inputs[3] < 50 {
		if inputs[0] < 4031 {
			12
		} else {
			2
		}
	} else {
		0-12
	}
}
fn trees9class1(inputs : [i32;6],) -> pub i32 {
	if inputs[2] < 50 {
		if inputs[0] < 3785 {
			14
		} else {
			1
		}
	} else {
		0-11
	}
}
fn trees9class2(inputs : [i32;6],) -> pub i32 {
	if inputs[0] < 3796 {
		0-11
	} else {
		if inputs[1] < 50 {
			7
		} else {
			if inputs[3] < 50 {
				13
			} else {
				0-9
			}
		}
	}
}
fn trees9class3(inputs : [i32;6],) -> pub i32 {
	if inputs[1] < 50 {
		0-12
	} else {
		if inputs[5] < 50 {
			if inputs[0] < 4055 {
				6
			} else {
				2
			}
		} else {
			11
		}
	}
}
fn main(inputs : [i32;6],) -> pub i32 {
	let trees0_class0: i32 = trees0class0(inputs);
	let trees0_class1: i32 = trees0class1(inputs);
	let trees0_class2: i32 = trees0class2(inputs);
	let trees0_class3: i32 = trees0class3(inputs);
	let trees1_class0: i32 = trees1class0(inputs);
	let trees1_class1: i32 = trees1class1(inputs);
	let trees1_class2: i32 = trees1class2(inputs);
	let trees1_class3: i32 = trees1class3(inputs);
	let trees2_class0: i32 = trees2class0(inputs);
	let trees2_class1: i32 = trees2class1(inputs);
	let trees2_class2: i32 = trees2class2(inputs);
	let trees2_class3: i32 = trees2class3(inputs);
	let trees3_class0: i32 = trees3class0(inputs);
	let trees3_class1: i32 = trees3class1(inputs);
	let trees3_class2: i32 = trees3class2(inputs);
	let trees3_class3: i32 = trees3class3(inputs);
	let trees4_class0: i32 = trees4class0(inputs);
	let trees4_class1: i32 = trees4class1(inputs);
	let trees4_class2: i32 = trees4class2(inputs);
	let trees4_class3: i32 = trees4class3(inputs);
	let trees5_class0: i32 = trees5class0(inputs);
	let trees5_class1: i32 = trees5class1(inputs);
	let trees5_class2: i32 = trees5class2(inputs);
	let trees5_class3: i32 = trees5class3(inputs);
	let trees6_class0: i32 = trees6class0(inputs);
	let trees6_class1: i32 = trees6class1(inputs);
	let trees6_class2: i32 = trees6class2(inputs);
	let trees6_class3: i32 = trees6class3(inputs);
	let trees7_class0: i32 = trees7class0(inputs);
	let trees7_class1: i32 = trees7class1(inputs);
	let trees7_class2: i32 = trees7class2(inputs);
	let trees7_class3: i32 = trees7class3(inputs);
	let trees8_class0: i32 = trees8class0(inputs);
	let trees8_class1: i32 = trees8class1(inputs);
	let trees8_class2: i32 = trees8class2(inputs);
	let trees8_class3: i32 = trees8class3(inputs);
	let trees9_class0: i32 = trees9class0(inputs);
	let trees9_class1: i32 = trees9class1(inputs);
	let trees9_class2: i32 = trees9class2(inputs);
	let trees9_class3: i32 = trees9class3(inputs);
	let c0: i32 = trees0_class0 + trees1_class0 + trees2_class0 + trees3_class0 + trees4_class0 + trees5_class0 + trees6_class0 + trees7_class0 + trees8_class0 + trees9_class0;
	let c1: i32 = trees0_class1 + trees1_class1 + trees2_class1 + trees3_class1 + trees4_class1 + trees5_class1 + trees6_class1 + trees7_class1 + trees8_class1 + trees9_class1;
	let c2: i32 = trees0_class2 + trees1_class2 + trees2_class2 + trees3_class2 + trees4_class2 + trees5_class2 + trees6_class2 + trees7_class2 + trees8_class2 + trees9_class2;
	let c3: i32 = trees0_class3 + trees1_class3 + trees2_class3 + trees3_class3 + trees4_class3 + trees5_class3 + trees6_class3 + trees7_class3 + trees8_class3 + trees9_class3;
	let mut max_ele_index: i32 = c0;
	let mut res: i32 = 0;
	if c1 > max_ele_index {
		max_ele_index = c1;
		res = 1;
	}
	if c2 > max_ele_index {
		max_ele_index = c2;
		res = 2;
	}
	if c3 > max_ele_index {
		max_ele_index = c3;
		res = 3;
	}
	println(res);
	res
}


#[test]
fn test_main() {
    let inputs: [i32;6] = [3550, 0, 100, 0, 0, 0];
    main(inputs);

    // Uncomment to make test fail
    // main(1, 1);
}

// Code generated from Python2Noir
// inputs quantization scale reciprocal: 255
// inputs quantization zero-point: 0
// quantize_type: uint8
use dep::std::println;
mod quantize_arithmetic;
fn trees0class0(inputs : [u32;6],) -> pub u32 {
	if inputs[3] <= 128 {
		if inputs[1] <= 128 {
			195
		} else {
			107
		}
	} else {
		102
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees0class1(inputs : [u32;6],) -> pub u32 {
	if inputs[2] <= 128 {
		if inputs[0] <= 147 {
			199
		} else {
			108
		}
	} else {
		103
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees0class2(inputs : [u32;6],) -> pub u32 {
	if inputs[0] <= 104 {
		103
	} else {
		if inputs[2] <= 128 {
			108
		} else {
			if inputs[1] <= 128 {
				193
			} else {
				if inputs[3] <= 128 {
					188
				} else {
					106
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees0class3(inputs : [u32;6],) -> pub u32 {
	if inputs[1] <= 128 {
		102
	} else {
		if inputs[3] <= 128 {
			107
		} else {
			190
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees1class0(inputs : [u32;6],) -> pub u32 {
	if inputs[3] <= 128 {
		if inputs[1] <= 128 {
			170
		} else {
			108
		}
	} else {
		104
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees1class1(inputs : [u32;6],) -> pub u32 {
	if inputs[2] <= 128 {
		if inputs[0] <= 147 {
			171
		} else {
			110
		}
	} else {
		104
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees1class2(inputs : [u32;6],) -> pub u32 {
	if inputs[0] <= 104 {
		105
	} else {
		if inputs[2] <= 128 {
			110
		} else {
			if inputs[1] <= 128 {
				169
			} else {
				if inputs[3] <= 128 {
					168
				} else {
					108
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees1class3(inputs : [u32;6],) -> pub u32 {
	if inputs[1] <= 128 {
		104
	} else {
		if inputs[3] <= 128 {
			108
		} else {
			168
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees2class0(inputs : [u32;6],) -> pub u32 {
	if inputs[3] <= 128 {
		if inputs[1] <= 128 {
			160
		} else {
			110
		}
	} else {
		106
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees2class1(inputs : [u32;6],) -> pub u32 {
	if inputs[2] <= 128 {
		if inputs[0] <= 147 {
			161
		} else {
			112
		}
	} else {
		106
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees2class2(inputs : [u32;6],) -> pub u32 {
	if inputs[0] <= 104 {
		106
	} else {
		if inputs[2] <= 128 {
			112
		} else {
			if inputs[1] <= 128 {
				159
			} else {
				if inputs[3] <= 128 {
					159
				} else {
					109
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees2class3(inputs : [u32;6],) -> pub u32 {
	if inputs[1] <= 128 {
		105
	} else {
		if inputs[3] <= 128 {
			110
		} else {
			159
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees3class0(inputs : [u32;6],) -> pub u32 {
	if inputs[3] <= 128 {
		if inputs[1] <= 128 {
			155
		} else {
			111
		}
	} else {
		107
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees3class1(inputs : [u32;6],) -> pub u32 {
	if inputs[2] <= 128 {
		if inputs[0] <= 147 {
			155
		} else {
			113
		}
	} else {
		107
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees3class2(inputs : [u32;6],) -> pub u32 {
	if inputs[0] <= 104 {
		107
	} else {
		if inputs[2] <= 128 {
			113
		} else {
			if inputs[1] <= 128 {
				154
			} else {
				if inputs[3] <= 128 {
					153
				} else {
					111
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees3class3(inputs : [u32;6],) -> pub u32 {
	if inputs[1] <= 128 {
		107
	} else {
		if inputs[3] <= 128 {
			111
		} else {
			154
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees4class0(inputs : [u32;6],) -> pub u32 {
	if inputs[3] <= 128 {
		if inputs[1] <= 128 {
			151
		} else {
			113
		}
	} else {
		108
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees4class1(inputs : [u32;6],) -> pub u32 {
	if inputs[2] <= 128 {
		if inputs[0] <= 147 {
			152
		} else {
			115
		}
	} else {
		108
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees4class2(inputs : [u32;6],) -> pub u32 {
	if inputs[0] <= 104 {
		108
	} else {
		if inputs[2] <= 128 {
			115
		} else {
			if inputs[1] <= 128 {
				151
			} else {
				if inputs[3] <= 128 {
					150
				} else {
					112
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees4class3(inputs : [u32;6],) -> pub u32 {
	if inputs[1] <= 128 {
		107
	} else {
		if inputs[3] <= 128 {
			113
		} else {
			150
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees5class0(inputs : [u32;6],) -> pub u32 {
	if inputs[3] <= 128 {
		if inputs[1] <= 128 {
			149
		} else {
			114
		}
	} else {
		108
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees5class1(inputs : [u32;6],) -> pub u32 {
	if inputs[2] <= 128 {
		if inputs[0] <= 147 {
			149
		} else {
			116
		}
	} else {
		109
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees5class2(inputs : [u32;6],) -> pub u32 {
	if inputs[0] <= 104 {
		109
	} else {
		if inputs[2] <= 128 {
			116
		} else {
			if inputs[1] <= 128 {
				148
			} else {
				if inputs[3] <= 128 {
					148
				} else {
					113
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees5class3(inputs : [u32;6],) -> pub u32 {
	if inputs[1] <= 128 {
		108
	} else {
		if inputs[3] <= 128 {
			114
		} else {
			148
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees6class0(inputs : [u32;6],) -> pub u32 {
	if inputs[3] <= 128 {
		if inputs[1] <= 128 {
			147
		} else {
			115
		}
	} else {
		109
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees6class1(inputs : [u32;6],) -> pub u32 {
	if inputs[2] <= 128 {
		if inputs[0] <= 100 {
			148
		} else {
			129
		}
	} else {
		110
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees6class2(inputs : [u32;6],) -> pub u32 {
	if inputs[0] <= 104 {
		110
	} else {
		if inputs[5] <= 128 {
			134
		} else {
			142
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees6class3(inputs : [u32;6],) -> pub u32 {
	if inputs[1] <= 128 {
		109
	} else {
		if inputs[3] <= 128 {
			115
		} else {
			146
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees7class0(inputs : [u32;6],) -> pub u32 {
	if inputs[3] <= 128 {
		if inputs[1] <= 128 {
			146
		} else {
			116
		}
	} else {
		110
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees7class1(inputs : [u32;6],) -> pub u32 {
	if inputs[2] <= 128 {
		if inputs[0] <= 100 {
			146
		} else {
			128
		}
	} else {
		110
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees7class2(inputs : [u32;6],) -> pub u32 {
	if inputs[0] <= 104 {
		111
	} else {
		if inputs[5] <= 128 {
			133
		} else {
			140
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees7class3(inputs : [u32;6],) -> pub u32 {
	if inputs[1] <= 128 {
		110
	} else {
		if inputs[3] <= 128 {
			116
		} else {
			145
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees8class0(inputs : [u32;6],) -> pub u32 {
	if inputs[3] <= 128 {
		if inputs[1] <= 128 {
			145
		} else {
			116
		}
	} else {
		111
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees8class1(inputs : [u32;6],) -> pub u32 {
	if inputs[2] <= 128 {
		if inputs[0] <= 100 {
			145
		} else {
			128
		}
	} else {
		111
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees8class2(inputs : [u32;6],) -> pub u32 {
	if inputs[0] <= 104 {
		112
	} else {
		if inputs[0] <= 185 {
			141
		} else {
			if inputs[3] <= 128 {
				137
			} else {
				if inputs[1] <= 128 {
					140
				} else {
					115
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees8class3(inputs : [u32;6],) -> pub u32 {
	if inputs[1] <= 128 {
		111
	} else {
		if inputs[3] <= 128 {
			116
		} else {
			144
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees9class0(inputs : [u32;6],) -> pub u32 {
	if inputs[3] <= 128 {
		if inputs[0] <= 144 {
			141
		} else {
			132
		}
	} else {
		112
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees9class1(inputs : [u32;6],) -> pub u32 {
	if inputs[0] <= 104 {
		if inputs[4] <= 128 {
			132
		} else {
			144
		}
	} else {
		112
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees9class2(inputs : [u32;6],) -> pub u32 {
	if inputs[2] <= 128 {
		112
	} else {
		if inputs[0] <= 108 {
			124
		} else {
			if inputs[3] <= 128 {
				143
			} else {
				if inputs[1] <= 128 {
					142
				} else {
					116
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees9class3(inputs : [u32;6],) -> pub u32 {
	if inputs[1] <= 128 {
		111
	} else {
		if inputs[5] <= 128 {
			if inputs[0] <= 215 {
				131
			} else {
				127
			}
		} else {
			138
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn count_prob<N>(class_prob : [u32;N],) -> pub u32 {
	let mut cls: Field = class_prob[0] as Field;
	for i in 1..N {
		cls = quantize_arithmetic::add(cls,127,128,class_prob[i] as Field,127,128,127,128);
	}
	cls = quantize_arithmetic::mul(cls,127,128,1,0,1,125,13);
	((cls*128) as u32)/128
}
fn main(inputs : [u32;6],) -> pub u32 {
	let trees0_class0: u32 = trees0class0(inputs);
	let trees0_class1: u32 = trees0class1(inputs);
	let trees0_class2: u32 = trees0class2(inputs);
	let trees0_class3: u32 = trees0class3(inputs);
	let trees1_class0: u32 = trees1class0(inputs);
	let trees1_class1: u32 = trees1class1(inputs);
	let trees1_class2: u32 = trees1class2(inputs);
	let trees1_class3: u32 = trees1class3(inputs);
	let trees2_class0: u32 = trees2class0(inputs);
	let trees2_class1: u32 = trees2class1(inputs);
	let trees2_class2: u32 = trees2class2(inputs);
	let trees2_class3: u32 = trees2class3(inputs);
	let trees3_class0: u32 = trees3class0(inputs);
	let trees3_class1: u32 = trees3class1(inputs);
	let trees3_class2: u32 = trees3class2(inputs);
	let trees3_class3: u32 = trees3class3(inputs);
	let trees4_class0: u32 = trees4class0(inputs);
	let trees4_class1: u32 = trees4class1(inputs);
	let trees4_class2: u32 = trees4class2(inputs);
	let trees4_class3: u32 = trees4class3(inputs);
	let trees5_class0: u32 = trees5class0(inputs);
	let trees5_class1: u32 = trees5class1(inputs);
	let trees5_class2: u32 = trees5class2(inputs);
	let trees5_class3: u32 = trees5class3(inputs);
	let trees6_class0: u32 = trees6class0(inputs);
	let trees6_class1: u32 = trees6class1(inputs);
	let trees6_class2: u32 = trees6class2(inputs);
	let trees6_class3: u32 = trees6class3(inputs);
	let trees7_class0: u32 = trees7class0(inputs);
	let trees7_class1: u32 = trees7class1(inputs);
	let trees7_class2: u32 = trees7class2(inputs);
	let trees7_class3: u32 = trees7class3(inputs);
	let trees8_class0: u32 = trees8class0(inputs);
	let trees8_class1: u32 = trees8class1(inputs);
	let trees8_class2: u32 = trees8class2(inputs);
	let trees8_class3: u32 = trees8class3(inputs);
	let trees9_class0: u32 = trees9class0(inputs);
	let trees9_class1: u32 = trees9class1(inputs);
	let trees9_class2: u32 = trees9class2(inputs);
	let trees9_class3: u32 = trees9class3(inputs);
	let c0: u32 = count_prob([trees0_class0, trees1_class0, trees2_class0, trees3_class0, trees4_class0, trees5_class0, trees6_class0, trees7_class0, trees8_class0, trees9_class0]);
	let c1: u32 = count_prob([trees0_class1, trees1_class1, trees2_class1, trees3_class1, trees4_class1, trees5_class1, trees6_class1, trees7_class1, trees8_class1, trees9_class1]);
	let c2: u32 = count_prob([trees0_class2, trees1_class2, trees2_class2, trees3_class2, trees4_class2, trees5_class2, trees6_class2, trees7_class2, trees8_class2, trees9_class2]);
	let c3: u32 = count_prob([trees0_class3, trees1_class3, trees2_class3, trees3_class3, trees4_class3, trees5_class3, trees6_class3, trees7_class3, trees8_class3, trees9_class3]);
	let mut max_ele_index: u32 = c0;
	let mut res: u32 = 0;
	if c1 > max_ele_index {
		max_ele_index = c1;
		res = 1;
	}
	if c2 > max_ele_index {
		max_ele_index = c2;
		res = 2;
	}
	if c3 > max_ele_index {
		max_ele_index = c3;
		res = 3;
	}
	println(res);
	res
}


#[test]
fn test_main_0() {
    let inputs: [u32;6] = [0, 0, 255, 0, 0, 0];
    let res = main(inputs);
    assert(res==0);
}

#[test]
fn test_main_1() {
    let inputs: [u32;6] = [17, 0, 0, 255, 255, 255];
    let res = main(inputs);
    assert(res==1);
}

#[test]
fn test_main_2() {
    let inputs: [u32;6] = [255, 0, 255, 255, 0, 255];
    let res = main(inputs);
    assert(res==2);
}

#[test]
fn test_main_3() {
    let inputs: [u32;6] = [247, 255, 255, 255, 255, 0];
    let res = main(inputs);
    assert(res==3);
}
